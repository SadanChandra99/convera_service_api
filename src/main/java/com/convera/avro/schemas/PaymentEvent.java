/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.convera.avro.schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4013648369266917041L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentEvent\",\"namespace\":\"com.convera.avro.schemas\",\"fields\":[{\"name\":\"eventId\",\"type\":\"string\"},{\"name\":\"eventType\",\"type\":\"string\"},{\"name\":\"transactionAccountId\",\"type\":\"string\"},{\"name\":\"parentAccountId\",\"type\":\"string\"},{\"name\":\"occurredOn\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"The timestamp for when the event was created\"},{\"name\":\"externalPaymentId\",\"type\":\"string\"},{\"name\":\"paymentTransactionStatus\",\"type\":\"string\"},{\"name\":\"paymentTransactionStatusReason\",\"type\":[\"null\",\"string\"]},{\"name\":\"receiveAmount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":2}},{\"name\":\"receiveCurrencyCode\",\"type\":\"string\"},{\"name\":\"payeeId\",\"type\":\"string\"},{\"name\":\"payeeName\",\"type\":\"string\"},{\"name\":\"paymentConfirmationNumber\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<PaymentEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence eventId;
  private java.lang.CharSequence eventType;
  private java.lang.CharSequence transactionAccountId;
  private java.lang.CharSequence parentAccountId;
  /** The timestamp for when the event was created */
  private java.time.Instant occurredOn;
  private java.lang.CharSequence externalPaymentId;
  private java.lang.CharSequence paymentTransactionStatus;
  private java.lang.CharSequence paymentTransactionStatusReason;
  private java.math.BigDecimal receiveAmount;
  private java.lang.CharSequence receiveCurrencyCode;
  private java.lang.CharSequence payeeId;
  private java.lang.CharSequence payeeName;
  private java.lang.CharSequence paymentConfirmationNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentEvent() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param eventType The new value for eventType
   * @param transactionAccountId The new value for transactionAccountId
   * @param parentAccountId The new value for parentAccountId
   * @param occurredOn The timestamp for when the event was created
   * @param externalPaymentId The new value for externalPaymentId
   * @param paymentTransactionStatus The new value for paymentTransactionStatus
   * @param paymentTransactionStatusReason The new value for paymentTransactionStatusReason
   * @param receiveAmount The new value for receiveAmount
   * @param receiveCurrencyCode The new value for receiveCurrencyCode
   * @param payeeId The new value for payeeId
   * @param payeeName The new value for payeeName
   * @param paymentConfirmationNumber The new value for paymentConfirmationNumber
   */
  public PaymentEvent(java.lang.CharSequence eventId, java.lang.CharSequence eventType, java.lang.CharSequence transactionAccountId, java.lang.CharSequence parentAccountId, java.time.Instant occurredOn, java.lang.CharSequence externalPaymentId, java.lang.CharSequence paymentTransactionStatus, java.lang.CharSequence paymentTransactionStatusReason, java.math.BigDecimal receiveAmount, java.lang.CharSequence receiveCurrencyCode, java.lang.CharSequence payeeId, java.lang.CharSequence payeeName, java.lang.CharSequence paymentConfirmationNumber) {
    this.eventId = eventId;
    this.eventType = eventType;
    this.transactionAccountId = transactionAccountId;
    this.parentAccountId = parentAccountId;
    this.occurredOn = occurredOn.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.externalPaymentId = externalPaymentId;
    this.paymentTransactionStatus = paymentTransactionStatus;
    this.paymentTransactionStatusReason = paymentTransactionStatusReason;
    this.receiveAmount = receiveAmount;
    this.receiveCurrencyCode = receiveCurrencyCode;
    this.payeeId = payeeId;
    this.payeeName = payeeName;
    this.paymentConfirmationNumber = paymentConfirmationNumber;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return eventType;
    case 2: return transactionAccountId;
    case 3: return parentAccountId;
    case 4: return occurredOn;
    case 5: return externalPaymentId;
    case 6: return paymentTransactionStatus;
    case 7: return paymentTransactionStatusReason;
    case 8: return receiveAmount;
    case 9: return receiveCurrencyCode;
    case 10: return payeeId;
    case 11: return payeeName;
    case 12: return paymentConfirmationNumber;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = (java.lang.CharSequence)value$; break;
    case 1: eventType = (java.lang.CharSequence)value$; break;
    case 2: transactionAccountId = (java.lang.CharSequence)value$; break;
    case 3: parentAccountId = (java.lang.CharSequence)value$; break;
    case 4: occurredOn = (java.time.Instant)value$; break;
    case 5: externalPaymentId = (java.lang.CharSequence)value$; break;
    case 6: paymentTransactionStatus = (java.lang.CharSequence)value$; break;
    case 7: paymentTransactionStatusReason = (java.lang.CharSequence)value$; break;
    case 8: receiveAmount = (java.math.BigDecimal)value$; break;
    case 9: receiveCurrencyCode = (java.lang.CharSequence)value$; break;
    case 10: payeeId = (java.lang.CharSequence)value$; break;
    case 11: payeeName = (java.lang.CharSequence)value$; break;
    case 12: paymentConfirmationNumber = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.CharSequence getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.CharSequence getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.CharSequence value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'transactionAccountId' field.
   * @return The value of the 'transactionAccountId' field.
   */
  public java.lang.CharSequence getTransactionAccountId() {
    return transactionAccountId;
  }


  /**
   * Sets the value of the 'transactionAccountId' field.
   * @param value the value to set.
   */
  public void setTransactionAccountId(java.lang.CharSequence value) {
    this.transactionAccountId = value;
  }

  /**
   * Gets the value of the 'parentAccountId' field.
   * @return The value of the 'parentAccountId' field.
   */
  public java.lang.CharSequence getParentAccountId() {
    return parentAccountId;
  }


  /**
   * Sets the value of the 'parentAccountId' field.
   * @param value the value to set.
   */
  public void setParentAccountId(java.lang.CharSequence value) {
    this.parentAccountId = value;
  }

  /**
   * Gets the value of the 'occurredOn' field.
   * @return The timestamp for when the event was created
   */
  public java.time.Instant getOccurredOn() {
    return occurredOn;
  }


  /**
   * Sets the value of the 'occurredOn' field.
   * The timestamp for when the event was created
   * @param value the value to set.
   */
  public void setOccurredOn(java.time.Instant value) {
    this.occurredOn = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'externalPaymentId' field.
   * @return The value of the 'externalPaymentId' field.
   */
  public java.lang.CharSequence getExternalPaymentId() {
    return externalPaymentId;
  }


  /**
   * Sets the value of the 'externalPaymentId' field.
   * @param value the value to set.
   */
  public void setExternalPaymentId(java.lang.CharSequence value) {
    this.externalPaymentId = value;
  }

  /**
   * Gets the value of the 'paymentTransactionStatus' field.
   * @return The value of the 'paymentTransactionStatus' field.
   */
  public java.lang.CharSequence getPaymentTransactionStatus() {
    return paymentTransactionStatus;
  }


  /**
   * Sets the value of the 'paymentTransactionStatus' field.
   * @param value the value to set.
   */
  public void setPaymentTransactionStatus(java.lang.CharSequence value) {
    this.paymentTransactionStatus = value;
  }

  /**
   * Gets the value of the 'paymentTransactionStatusReason' field.
   * @return The value of the 'paymentTransactionStatusReason' field.
   */
  public java.lang.CharSequence getPaymentTransactionStatusReason() {
    return paymentTransactionStatusReason;
  }


  /**
   * Sets the value of the 'paymentTransactionStatusReason' field.
   * @param value the value to set.
   */
  public void setPaymentTransactionStatusReason(java.lang.CharSequence value) {
    this.paymentTransactionStatusReason = value;
  }

  /**
   * Gets the value of the 'receiveAmount' field.
   * @return The value of the 'receiveAmount' field.
   */
  public java.math.BigDecimal getReceiveAmount() {
    return receiveAmount;
  }


  /**
   * Sets the value of the 'receiveAmount' field.
   * @param value the value to set.
   */
  public void setReceiveAmount(java.math.BigDecimal value) {
    this.receiveAmount = value;
  }

  /**
   * Gets the value of the 'receiveCurrencyCode' field.
   * @return The value of the 'receiveCurrencyCode' field.
   */
  public java.lang.CharSequence getReceiveCurrencyCode() {
    return receiveCurrencyCode;
  }


  /**
   * Sets the value of the 'receiveCurrencyCode' field.
   * @param value the value to set.
   */
  public void setReceiveCurrencyCode(java.lang.CharSequence value) {
    this.receiveCurrencyCode = value;
  }

  /**
   * Gets the value of the 'payeeId' field.
   * @return The value of the 'payeeId' field.
   */
  public java.lang.CharSequence getPayeeId() {
    return payeeId;
  }


  /**
   * Sets the value of the 'payeeId' field.
   * @param value the value to set.
   */
  public void setPayeeId(java.lang.CharSequence value) {
    this.payeeId = value;
  }

  /**
   * Gets the value of the 'payeeName' field.
   * @return The value of the 'payeeName' field.
   */
  public java.lang.CharSequence getPayeeName() {
    return payeeName;
  }


  /**
   * Sets the value of the 'payeeName' field.
   * @param value the value to set.
   */
  public void setPayeeName(java.lang.CharSequence value) {
    this.payeeName = value;
  }

  /**
   * Gets the value of the 'paymentConfirmationNumber' field.
   * @return The value of the 'paymentConfirmationNumber' field.
   */
  public java.lang.CharSequence getPaymentConfirmationNumber() {
    return paymentConfirmationNumber;
  }


  /**
   * Sets the value of the 'paymentConfirmationNumber' field.
   * @param value the value to set.
   */
  public void setPaymentConfirmationNumber(java.lang.CharSequence value) {
    this.paymentConfirmationNumber = value;
  }

  /**
   * Creates a new PaymentEvent RecordBuilder.
   * @return A new PaymentEvent RecordBuilder
   */
  public static com.convera.avro.schemas.PaymentEvent.Builder newBuilder() {
    return new com.convera.avro.schemas.PaymentEvent.Builder();
  }

  /**
   * Creates a new PaymentEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentEvent RecordBuilder
   */
  public static com.convera.avro.schemas.PaymentEvent.Builder newBuilder(com.convera.avro.schemas.PaymentEvent.Builder other) {
    if (other == null) {
      return new com.convera.avro.schemas.PaymentEvent.Builder();
    } else {
      return new com.convera.avro.schemas.PaymentEvent.Builder(other);
    }
  }

  /**
   * Creates a new PaymentEvent RecordBuilder by copying an existing PaymentEvent instance.
   * @param other The existing instance to copy.
   * @return A new PaymentEvent RecordBuilder
   */
  public static com.convera.avro.schemas.PaymentEvent.Builder newBuilder(com.convera.avro.schemas.PaymentEvent other) {
    if (other == null) {
      return new com.convera.avro.schemas.PaymentEvent.Builder();
    } else {
      return new com.convera.avro.schemas.PaymentEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentEvent>
    implements org.apache.avro.data.RecordBuilder<PaymentEvent> {

    private java.lang.CharSequence eventId;
    private java.lang.CharSequence eventType;
    private java.lang.CharSequence transactionAccountId;
    private java.lang.CharSequence parentAccountId;
    /** The timestamp for when the event was created */
    private java.time.Instant occurredOn;
    private java.lang.CharSequence externalPaymentId;
    private java.lang.CharSequence paymentTransactionStatus;
    private java.lang.CharSequence paymentTransactionStatusReason;
    private java.math.BigDecimal receiveAmount;
    private java.lang.CharSequence receiveCurrencyCode;
    private java.lang.CharSequence payeeId;
    private java.lang.CharSequence payeeName;
    private java.lang.CharSequence paymentConfirmationNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.convera.avro.schemas.PaymentEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.transactionAccountId)) {
        this.transactionAccountId = data().deepCopy(fields()[2].schema(), other.transactionAccountId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.parentAccountId)) {
        this.parentAccountId = data().deepCopy(fields()[3].schema(), other.parentAccountId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.occurredOn)) {
        this.occurredOn = data().deepCopy(fields()[4].schema(), other.occurredOn);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.externalPaymentId)) {
        this.externalPaymentId = data().deepCopy(fields()[5].schema(), other.externalPaymentId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.paymentTransactionStatus)) {
        this.paymentTransactionStatus = data().deepCopy(fields()[6].schema(), other.paymentTransactionStatus);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.paymentTransactionStatusReason)) {
        this.paymentTransactionStatusReason = data().deepCopy(fields()[7].schema(), other.paymentTransactionStatusReason);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.receiveAmount)) {
        this.receiveAmount = data().deepCopy(fields()[8].schema(), other.receiveAmount);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.receiveCurrencyCode)) {
        this.receiveCurrencyCode = data().deepCopy(fields()[9].schema(), other.receiveCurrencyCode);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.payeeId)) {
        this.payeeId = data().deepCopy(fields()[10].schema(), other.payeeId);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.payeeName)) {
        this.payeeName = data().deepCopy(fields()[11].schema(), other.payeeName);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.paymentConfirmationNumber)) {
        this.paymentConfirmationNumber = data().deepCopy(fields()[12].schema(), other.paymentConfirmationNumber);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.convera.avro.schemas.PaymentEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactionAccountId)) {
        this.transactionAccountId = data().deepCopy(fields()[2].schema(), other.transactionAccountId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.parentAccountId)) {
        this.parentAccountId = data().deepCopy(fields()[3].schema(), other.parentAccountId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.occurredOn)) {
        this.occurredOn = data().deepCopy(fields()[4].schema(), other.occurredOn);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.externalPaymentId)) {
        this.externalPaymentId = data().deepCopy(fields()[5].schema(), other.externalPaymentId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.paymentTransactionStatus)) {
        this.paymentTransactionStatus = data().deepCopy(fields()[6].schema(), other.paymentTransactionStatus);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.paymentTransactionStatusReason)) {
        this.paymentTransactionStatusReason = data().deepCopy(fields()[7].schema(), other.paymentTransactionStatusReason);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.receiveAmount)) {
        this.receiveAmount = data().deepCopy(fields()[8].schema(), other.receiveAmount);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.receiveCurrencyCode)) {
        this.receiveCurrencyCode = data().deepCopy(fields()[9].schema(), other.receiveCurrencyCode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.payeeId)) {
        this.payeeId = data().deepCopy(fields()[10].schema(), other.payeeId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.payeeName)) {
        this.payeeName = data().deepCopy(fields()[11].schema(), other.payeeName);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.paymentConfirmationNumber)) {
        this.paymentConfirmationNumber = data().deepCopy(fields()[12].schema(), other.paymentConfirmationNumber);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setEventId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setEventType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.eventType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionAccountId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionAccountId() {
      return transactionAccountId;
    }


    /**
      * Sets the value of the 'transactionAccountId' field.
      * @param value The value of 'transactionAccountId'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setTransactionAccountId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.transactionAccountId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionAccountId' field has been set.
      * @return True if the 'transactionAccountId' field has been set, false otherwise.
      */
    public boolean hasTransactionAccountId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transactionAccountId' field.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearTransactionAccountId() {
      transactionAccountId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentAccountId' field.
      * @return The value.
      */
    public java.lang.CharSequence getParentAccountId() {
      return parentAccountId;
    }


    /**
      * Sets the value of the 'parentAccountId' field.
      * @param value The value of 'parentAccountId'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setParentAccountId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.parentAccountId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'parentAccountId' field has been set.
      * @return True if the 'parentAccountId' field has been set, false otherwise.
      */
    public boolean hasParentAccountId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'parentAccountId' field.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearParentAccountId() {
      parentAccountId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'occurredOn' field.
      * The timestamp for when the event was created
      * @return The value.
      */
    public java.time.Instant getOccurredOn() {
      return occurredOn;
    }


    /**
      * Sets the value of the 'occurredOn' field.
      * The timestamp for when the event was created
      * @param value The value of 'occurredOn'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setOccurredOn(java.time.Instant value) {
      validate(fields()[4], value);
      this.occurredOn = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'occurredOn' field has been set.
      * The timestamp for when the event was created
      * @return True if the 'occurredOn' field has been set, false otherwise.
      */
    public boolean hasOccurredOn() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'occurredOn' field.
      * The timestamp for when the event was created
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearOccurredOn() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalPaymentId' field.
      * @return The value.
      */
    public java.lang.CharSequence getExternalPaymentId() {
      return externalPaymentId;
    }


    /**
      * Sets the value of the 'externalPaymentId' field.
      * @param value The value of 'externalPaymentId'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setExternalPaymentId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.externalPaymentId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'externalPaymentId' field has been set.
      * @return True if the 'externalPaymentId' field has been set, false otherwise.
      */
    public boolean hasExternalPaymentId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'externalPaymentId' field.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearExternalPaymentId() {
      externalPaymentId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentTransactionStatus' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentTransactionStatus() {
      return paymentTransactionStatus;
    }


    /**
      * Sets the value of the 'paymentTransactionStatus' field.
      * @param value The value of 'paymentTransactionStatus'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setPaymentTransactionStatus(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.paymentTransactionStatus = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentTransactionStatus' field has been set.
      * @return True if the 'paymentTransactionStatus' field has been set, false otherwise.
      */
    public boolean hasPaymentTransactionStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'paymentTransactionStatus' field.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearPaymentTransactionStatus() {
      paymentTransactionStatus = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentTransactionStatusReason' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentTransactionStatusReason() {
      return paymentTransactionStatusReason;
    }


    /**
      * Sets the value of the 'paymentTransactionStatusReason' field.
      * @param value The value of 'paymentTransactionStatusReason'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setPaymentTransactionStatusReason(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.paymentTransactionStatusReason = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentTransactionStatusReason' field has been set.
      * @return True if the 'paymentTransactionStatusReason' field has been set, false otherwise.
      */
    public boolean hasPaymentTransactionStatusReason() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'paymentTransactionStatusReason' field.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearPaymentTransactionStatusReason() {
      paymentTransactionStatusReason = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiveAmount' field.
      * @return The value.
      */
    public java.math.BigDecimal getReceiveAmount() {
      return receiveAmount;
    }


    /**
      * Sets the value of the 'receiveAmount' field.
      * @param value The value of 'receiveAmount'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setReceiveAmount(java.math.BigDecimal value) {
      validate(fields()[8], value);
      this.receiveAmount = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'receiveAmount' field has been set.
      * @return True if the 'receiveAmount' field has been set, false otherwise.
      */
    public boolean hasReceiveAmount() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'receiveAmount' field.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearReceiveAmount() {
      receiveAmount = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiveCurrencyCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getReceiveCurrencyCode() {
      return receiveCurrencyCode;
    }


    /**
      * Sets the value of the 'receiveCurrencyCode' field.
      * @param value The value of 'receiveCurrencyCode'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setReceiveCurrencyCode(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.receiveCurrencyCode = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'receiveCurrencyCode' field has been set.
      * @return True if the 'receiveCurrencyCode' field has been set, false otherwise.
      */
    public boolean hasReceiveCurrencyCode() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'receiveCurrencyCode' field.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearReceiveCurrencyCode() {
      receiveCurrencyCode = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'payeeId' field.
      * @return The value.
      */
    public java.lang.CharSequence getPayeeId() {
      return payeeId;
    }


    /**
      * Sets the value of the 'payeeId' field.
      * @param value The value of 'payeeId'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setPayeeId(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.payeeId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'payeeId' field has been set.
      * @return True if the 'payeeId' field has been set, false otherwise.
      */
    public boolean hasPayeeId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'payeeId' field.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearPayeeId() {
      payeeId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'payeeName' field.
      * @return The value.
      */
    public java.lang.CharSequence getPayeeName() {
      return payeeName;
    }


    /**
      * Sets the value of the 'payeeName' field.
      * @param value The value of 'payeeName'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setPayeeName(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.payeeName = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'payeeName' field has been set.
      * @return True if the 'payeeName' field has been set, false otherwise.
      */
    public boolean hasPayeeName() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'payeeName' field.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearPayeeName() {
      payeeName = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentConfirmationNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentConfirmationNumber() {
      return paymentConfirmationNumber;
    }


    /**
      * Sets the value of the 'paymentConfirmationNumber' field.
      * @param value The value of 'paymentConfirmationNumber'.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder setPaymentConfirmationNumber(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.paymentConfirmationNumber = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentConfirmationNumber' field has been set.
      * @return True if the 'paymentConfirmationNumber' field has been set, false otherwise.
      */
    public boolean hasPaymentConfirmationNumber() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'paymentConfirmationNumber' field.
      * @return This builder.
      */
    public com.convera.avro.schemas.PaymentEvent.Builder clearPaymentConfirmationNumber() {
      paymentConfirmationNumber = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentEvent build() {
      try {
        PaymentEvent record = new PaymentEvent();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.eventType = fieldSetFlags()[1] ? this.eventType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.transactionAccountId = fieldSetFlags()[2] ? this.transactionAccountId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.parentAccountId = fieldSetFlags()[3] ? this.parentAccountId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.occurredOn = fieldSetFlags()[4] ? this.occurredOn : (java.time.Instant) defaultValue(fields()[4]);
        record.externalPaymentId = fieldSetFlags()[5] ? this.externalPaymentId : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.paymentTransactionStatus = fieldSetFlags()[6] ? this.paymentTransactionStatus : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.paymentTransactionStatusReason = fieldSetFlags()[7] ? this.paymentTransactionStatusReason : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.receiveAmount = fieldSetFlags()[8] ? this.receiveAmount : (java.math.BigDecimal) defaultValue(fields()[8]);
        record.receiveCurrencyCode = fieldSetFlags()[9] ? this.receiveCurrencyCode : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.payeeId = fieldSetFlags()[10] ? this.payeeId : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.payeeName = fieldSetFlags()[11] ? this.payeeName : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.paymentConfirmationNumber = fieldSetFlags()[12] ? this.paymentConfirmationNumber : (java.lang.CharSequence) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentEvent>
    READER$ = (org.apache.avro.io.DatumReader<PaymentEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










